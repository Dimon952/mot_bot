import os
import logging
import json
import schedule
import time
from threading import Thread

import google.generativeai as genai
from telegram import Update, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§–∞–π–ª –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
CONFIG_FILE = "config.json"

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç—Ç–∞–ø—ã –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
(
    GET_TOKEN,
    GET_GEMINI_KEY,
    GET_PROXY,
    GET_SCHEDULE_TIME,
    CONFIRMATION,
) = range(5)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π ---
def load_config():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Ñ–∞–π–ª–∞ config.json"""
    if os.path.exists(CONFIG_FILE):
        with open(CONFIG_FILE, "r") as f:
            return json.load(f)
    return None


def save_config(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª config.json"""
    with open(CONFIG_FILE, "w") as f:
        json.dump(data, f, indent=4)
    logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞.")


# --- –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ ---
def generate_motivational_phrase(api_key: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ñ—Ä–∞–∑—É —Å –ø–æ–º–æ—â—å—é Google AI."""
    try:
        genai.configure(api_key=api_key)
        model = genai.GenerativeModel("gemini-1.5-flash")
        prompt = "–ù–∞–ø–∏—à–∏ –æ–¥–Ω—É –∫–æ—Ä–æ—Ç–∫—É—é, –Ω–æ –æ—á–µ–Ω—å —Å–∏–ª—å–Ω—É—é –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é —Ñ—Ä–∞–∑—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –û–Ω–∞ –¥–æ–ª–∂–Ω–∞ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –∏ –∑–∞—Ä—è–∂–∞—Ç—å —ç–Ω–µ—Ä–≥–∏–µ–π –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å. –ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –±–∞–Ω–∞–ª—å–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã."
        response = model.generate_content(prompt)
        logger.info("–§—Ä–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞.")
        return response.text
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ñ—Ä–∞–∑—ã: {e}")
        return "–ù–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–¥–∞–≤–∞–π—Å—è, –∏ —Ç—ã —É–≤–∏–¥–∏—à—å, –∫–∞–∫ —Å–¥–∞—é—Ç—Å—è –¥—Ä—É–≥–∏–µ. (–†–µ–∑–µ—Ä–≤–Ω–∞—è —Ñ—Ä–∞–∑–∞)"


async def send_motivation(context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–¥–∞—á–∞, –∫–æ—Ç–æ—Ä–∞—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."""
    config = load_config()
    if not config:
        logger.warning("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
        return

    chat_id = config.get("admin_chat_id")
    api_key = config.get("gemini_api_key")

    if not chat_id or not api_key:
        logger.error("–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω chat_id –∏–ª–∏ api_key –≤ –∫–æ–Ω—Ñ–∏–≥–µ.")
        return

    phrase = generate_motivational_phrase(api_key)
    await context.bot.send_message(chat_id=chat_id, text=phrase)
    logger.info(f"–ú–æ—Ç–∏–≤–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –≤ —á–∞—Ç {chat_id}.")


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ---
async def start_setup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏, –µ—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω."""
    context.user_data["config"] = {}
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π –±—É–¥—É—â–∏–π –º–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–π –±–æ—Ç. \n"
        "–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ –º–æ–π –ø–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫. –î–∞–≤–∞–π –Ω–∞—Å—Ç—Ä–æ–∏–º –º–µ–Ω—è!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–æ–∫–µ–Ω —Ç–≤–æ–µ–≥–æ –±–æ—Ç–∞, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç @BotFather."
    )
    return GET_TOKEN


async def get_token(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ç–æ–∫–µ–Ω."""
    token = update.message.text
    context.user_data["config"]["telegram_token"] = token
    logger.info("–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω.")
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–≤–æ–π API –∫–ª—é—á –æ—Ç Google AI (Gemini)."
    )
    return GET_GEMINI_KEY


async def get_gemini_key(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∫–ª—é—á Gemini."""
    gemini_key = update.message.text
    context.user_data["config"]["gemini_api_key"] = gemini_key
    logger.info("–ö–ª—é—á Gemini –ø–æ–ª—É—á–µ–Ω.")
    await update.message.reply_text(
        "–ö–ª—é—á –ø—Ä–∏–Ω—è—Ç. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ URL –¥–ª—è –ø—Ä–æ–∫—Å–∏. \n\n"
        "–§–æ—Ä–º–∞—Ç: `socks5://user:pass@host:port` –∏–ª–∏ `http://host:port`\n\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω—É–∂–µ–Ω, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ '–Ω–µ—Ç' –∏–ª–∏ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
    )
    return GET_PROXY


async def get_proxy(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç URL –ø—Ä–æ–∫—Å–∏ –∏–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç —à–∞–≥."""
    proxy_url = update.message.text
    if proxy_url.lower() in ["–Ω–µ—Ç", "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "no", "skip"]:
        context.user_data["config"]["proxy_url"] = None
        logger.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–æ–∫—Å–∏ –ø—Ä–æ–ø—É—â–µ–Ω–∞.")
    else:
        context.user_data["config"]["proxy_url"] = proxy_url
        logger.info(f"–ü—Ä–æ–∫—Å–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {proxy_url}")

    await update.message.reply_text(
        "–•–æ—Ä–æ—à–æ. –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≤—Ä–µ–º—è –¥–ª—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
        "–í–≤–µ–¥–∏ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ `–ß–ß:–ú–ú` (–Ω–∞–ø—Ä–∏–º–µ—Ä, `04:00` –∏–ª–∏ `07:30`)."
    )
    return GET_SCHEDULE_TIME


async def get_schedule_time(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Ä–µ–º—è –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è."""
    schedule_time = update.message.text
    context.user_data["config"]["schedule_time"] = schedule_time
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–æ–¥–∏—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É
    context.user_data["config"]["admin_chat_id"] = update.effective_chat.id
    logger.info(f"–í—Ä–µ–º—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ {schedule_time}.")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–∞–π–ª
    save_config(context.user_data["config"])

    await update.message.reply_text(
        "üéâ **–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n"
        "–Ø —Å–æ—Ö—Ä–∞–Ω–∏–ª –≤—Å–µ –¥–∞–Ω–Ω—ã–µ. –¢–µ–ø–µ—Ä—å —è –±—É–¥—É —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–Ω–æ–º–Ω–æ –∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –º–æ—Ç–∏–≤–∞—Ü–∏—é –∫–∞–∂–¥—ã–π –¥–µ–Ω—å.\n"
        "–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Å—Ç—É–ø–∏–ª–∏ –≤ —Å–∏–ª—É, –º–µ–Ω—è –Ω—É–∂–Ω–æ **–ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å** –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ.\n\n"
        "–°–ø–∞—Å–∏–±–æ!",
        reply_markup=ReplyKeyboardRemove(),
    )
    return ConversationHandler.END


async def cancel_setup(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."""
    await update.message.reply_text(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove()
    )
    return ConversationHandler.END


# --- –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –∑–∞–ø—É—Å–∫–∞ ---
def run_scheduler(job_queue):
    """–§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ."""
    config = load_config()
    if not config:
        return
        
    schedule_time = config.get("schedule_time", "04:00")
    # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É
    schedule.every().day.at(schedule_time).do(
        lambda: job_queue.run_once(send_motivation, 0)
    )
    logger.info(f"–ó–∞–¥–∞—á–∞ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ {schedule_time}.")
    
    while True:
        schedule.run_pending()
        time.sleep(1)


def main() -> None:
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    config = load_config()

    if not config:
        # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥–∞ –Ω–µ—Ç, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞—Å—Ç—Ä–æ–π–∫—É
        logger.warning("–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        # –ù—É–∂–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω, —á—Ç–æ–±—ã –±–æ—Ç –º–æ–≥ —Ö–æ—Ç—è –±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞.
        # –ú–æ–∂–Ω–æ –ø–æ–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –µ–≥–æ –≤ –∫–æ–Ω—Å–æ–ª–∏ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É.
        # –ú—ã –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É, —Ç–∞–∫ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω –≤ –¥–∏–∞–ª–æ–≥–µ.
        temp_token = os.environ.get("TELEGRAM_TOKEN", "123:abc") # –ü—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Å—Ç–∞–≤–∏–º –∑–∞–≥–ª—É—à–∫—É
        
        application = Application.builder().token(temp_token).build()
        
        conv_handler = ConversationHandler(
            entry_points=[CommandHandler("start", start_setup)],
            states={
                GET_TOKEN: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_token)],
                GET_GEMINI_KEY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_gemini_key)],
                GET_PROXY: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_proxy)],
                GET_SCHEDULE_TIME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_schedule_time)],
            },
            fallbacks=[CommandHandler("cancel", cancel_setup)],
        )
        application.add_handler(conv_handler)
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")

    else:
        # –ï—Å–ª–∏ –∫–æ–Ω—Ñ–∏–≥ –µ—Å—Ç—å, –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ
        logger.info("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ä–∞–±–æ—á–µ–º —Ä–µ–∂–∏–º–µ.")
        
        # –°—Ç—Ä–æ–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞
        builder = Application.builder().token(config["telegram_token"])
        if config.get("proxy_url"):
            proxy_url = config["proxy_url"]
            logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ–∫—Å–∏: {proxy_url}")
            builder.proxy_url(proxy_url).get_updates_proxy_url(proxy_url)

        application = builder.build()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        scheduler_thread = Thread(target=run_scheduler, args=(application.job_queue,))
        scheduler_thread.daemon = True
        scheduler_thread.start()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == "__main__":
    main()
